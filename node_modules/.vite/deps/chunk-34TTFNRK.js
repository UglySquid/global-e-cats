import {
  AccordionContext_default
} from "./chunk-XI54RGX2.js";
import {
  StyledListItem
} from "./chunk-BMVTAVZK.js";
import {
  StyledListItemButton
} from "./chunk-STNJTE7F.js";
import {
  createSvgIcon
} from "./chunk-BSPT747W.js";
import {
  composeClasses,
  useSlot
} from "./chunk-4L2WJD2Z.js";
import {
  styled_default,
  useThemeProps
} from "./chunk-AWTXZBBN.js";
import {
  generateUtilityClass2 as generateUtilityClass,
  generateUtilityClasses2 as generateUtilityClasses
} from "./chunk-4LJ7BWDH.js";
import {
  _objectWithoutPropertiesLoose
} from "./chunk-BFL632LT.js";
import {
  _extends,
  require_jsx_runtime,
  require_prop_types
} from "./chunk-VCXT7S7N.js";
import {
  __toESM,
  require_react
} from "./chunk-XV7VEYX3.js";

// node_modules/@mui/joy/AccordionSummary/AccordionSummary.js
var React2 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/@mui/joy/AccordionSummary/accordionSummaryClasses.js
function getAccordionSummaryUtilityClass(slot) {
  return generateUtilityClass("MuiAccordionSummary", slot);
}
var accordionSummaryClasses = generateUtilityClasses("MuiAccordionSummary", ["root", "button", "indicator", "disabled", "expanded"]);
var accordionSummaryClasses_default = accordionSummaryClasses;

// node_modules/@mui/joy/internal/svg-icons/KeyboardArrowDown.js
var React = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var KeyboardArrowDown_default = createSvgIcon((0, import_jsx_runtime.jsx)("path", {
  d: "M7.41 8.59 12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z"
}), "KeyboardArrowDown");

// node_modules/@mui/joy/AccordionSummary/AccordionSummary.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var _KeyboardArrowDown;
var _excluded = ["component", "color", "children", "indicator", "variant", "slots", "slotProps"];
var useUtilityClasses = (ownerState) => {
  const {
    disabled,
    expanded
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", expanded && "expanded"],
    button: ["button", disabled && "disabled", expanded && "expanded"],
    indicator: ["indicator", disabled && "disabled", expanded && "expanded"]
  };
  return composeClasses(slots, getAccordionSummaryUtilityClass, {});
};
var AccordionSummaryRoot = styled_default(StyledListItem, {
  name: "JoyAccordionSummary",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme
}) => ({
  fontWeight: theme.vars.fontWeight.md,
  gap: "calc(var(--ListItem-paddingX, 0.75rem) + 0.25rem)",
  [`&.${accordionSummaryClasses_default.expanded}`]: {
    "--Icon-color": "currentColor"
  }
}));
var AccordionSummaryButton = styled_default(StyledListItemButton, {
  name: "JoyAccordionSummary",
  slot: "Button",
  overridesResolver: (props, styles) => styles.button
})({
  gap: "inherit",
  fontWeight: "inherit",
  justifyContent: "space-between",
  font: "inherit",
  "&:focus-visible": {
    zIndex: 1
    // to make the focus ring appear above the next Accordion.
  },
  [`.${accordionSummaryClasses_default.root} &`]: {
    "--unstable_ListItem-flex": "1 0 0%"
    // grow to fill the available space of ListItem
  }
});
var AccordionSummaryIndicator = styled_default("span", {
  name: "JoyAccordionSummary",
  slot: "Indicator",
  overridesResolver: (props, styles) => styles.indicator
})({
  display: "inline-flex",
  [`&.${accordionSummaryClasses_default.expanded}`]: {
    transform: "rotate(180deg)"
  }
});
var AccordionSummary = React2.forwardRef(function AccordionSummary2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyAccordionSummary"
  });
  const {
    component = "div",
    color = "neutral",
    children,
    indicator = _KeyboardArrowDown || (_KeyboardArrowDown = (0, import_jsx_runtime2.jsx)(KeyboardArrowDown_default, {})),
    variant = "plain",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const {
    accordionId,
    disabled = false,
    expanded = false,
    toggle
  } = React2.useContext(AccordionContext_default);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const ownerState = _extends({}, props, {
    component,
    color,
    disabled,
    expanded,
    variant
  });
  const handleClick = (event) => {
    if (toggle) {
      toggle(event);
    }
    if (typeof slotProps.button === "function") {
      var _slotProps$button, _slotProps$button$onC;
      (_slotProps$button = slotProps.button(ownerState)) == null || (_slotProps$button$onC = _slotProps$button.onClick) == null || _slotProps$button$onC.call(_slotProps$button, event);
    } else {
      var _slotProps$button2, _slotProps$button2$on;
      (_slotProps$button2 = slotProps.button) == null || (_slotProps$button2$on = _slotProps$button2.onClick) == null || _slotProps$button2$on.call(_slotProps$button2, event);
    }
  };
  const classes = useUtilityClasses(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: AccordionSummaryRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotButton, buttonProps] = useSlot("button", {
    ref,
    className: classes.button,
    elementType: AccordionSummaryButton,
    externalForwardedProps,
    additionalProps: {
      component: "button",
      id: `${accordionId}-summary`,
      "aria-expanded": expanded ? "true" : "false",
      "aria-controls": `${accordionId}-details`,
      disabled,
      type: "button",
      onClick: handleClick
    },
    ownerState
  });
  const [SlotIndicator, indicatorProps] = useSlot("indicator", {
    ref,
    className: classes.indicator,
    elementType: AccordionSummaryIndicator,
    externalForwardedProps,
    ownerState
  });
  return (
    // Root and Button slots are required based on [WAI-ARIA Accordion](https://www.w3.org/WAI/ARIA/apg/patterns/accordion/examples/accordion/)
    (0, import_jsx_runtime2.jsx)(SlotRoot, _extends({}, rootProps, {
      children: (0, import_jsx_runtime3.jsxs)(SlotButton, _extends({}, buttonProps, {
        children: [children, indicator && (0, import_jsx_runtime2.jsx)(SlotIndicator, _extends({}, indicatorProps, {
          children: indicator
        }))]
      }))
    }))
  );
});
true ? AccordionSummary.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used to render icon or text elements inside the AccordionSummary if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types.default.oneOf(["danger", "neutral", "primary", "success", "warning"]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types.default.elementType,
  /**
   * The indicator element to display.
   * @default <KeyboardArrowDown />
   */
  indicator: import_prop_types.default.node,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types.default.shape({
    button: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object]),
    indicator: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object]),
    root: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types.default.shape({
    button: import_prop_types.default.elementType,
    indicator: import_prop_types.default.elementType,
    root: import_prop_types.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types.default.oneOf(["outlined", "plain", "soft", "solid"])
} : void 0;
var AccordionSummary_default = AccordionSummary;

export {
  getAccordionSummaryUtilityClass,
  accordionSummaryClasses_default,
  AccordionSummary_default
};
//# sourceMappingURL=chunk-34TTFNRK.js.map
