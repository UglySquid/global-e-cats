import {
  accordionClasses_default
} from "./chunk-ZUPAF4X3.js";
import {
  accordionDetailsClasses_default
} from "./chunk-GMQ7N62U.js";
import {
  ListProvider_default,
  StyledList
} from "./chunk-543NQZHY.js";
import {
  composeClasses,
  useSlot
} from "./chunk-4L2WJD2Z.js";
import {
  styled_default,
  useThemeProps
} from "./chunk-AWTXZBBN.js";
import {
  capitalize,
  generateUtilityClass2 as generateUtilityClass,
  generateUtilityClasses2 as generateUtilityClasses
} from "./chunk-4LJ7BWDH.js";
import {
  _objectWithoutPropertiesLoose
} from "./chunk-BFL632LT.js";
import {
  _extends,
  require_jsx_runtime,
  require_prop_types
} from "./chunk-VCXT7S7N.js";
import {
  __toESM,
  require_react
} from "./chunk-XV7VEYX3.js";

// node_modules/@mui/joy/AccordionGroup/AccordionGroup.js
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/@mui/joy/AccordionGroup/accordionGroupClasses.js
function getAccordionGroupUtilityClass(slot) {
  return generateUtilityClass("MuiAccordionGroup", slot);
}
var accordionGroupClasses = generateUtilityClasses("MuiAccordionGroup", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg"]);
var accordionGroupClasses_default = accordionGroupClasses;

// node_modules/@mui/joy/AccordionGroup/AccordionGroup.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["component", "color", "children", "disableDivider", "variant", "transition", "size", "slots", "slotProps"];
var useUtilityClasses = (ownerState) => {
  const {
    variant,
    color,
    size
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getAccordionGroupUtilityClass, {});
};
var AccordionGroupRoot = styled_default(StyledList, {
  name: "JoyAccordionGroup",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  let transition = {};
  if (ownerState.transition) {
    if (typeof ownerState.transition === "string") {
      transition = {
        "--AccordionDetails-transition": `grid-template-rows ${ownerState.transition}, padding-block ${ownerState.transition}`
      };
    }
    if (typeof ownerState.transition === "object") {
      transition = {
        "--AccordionDetails-transition": `grid-template-rows ${ownerState.transition.initial}, padding-block ${ownerState.transition.initial}`,
        [`& .${accordionDetailsClasses_default.root}.${accordionDetailsClasses_default.expanded}`]: {
          "--AccordionDetails-transition": `grid-template-rows ${ownerState.transition.expanded}, padding-block ${ownerState.transition.expanded}`
        }
      };
    }
  }
  return _extends({
    "--List-padding": "0px",
    "--ListDivider-gap": "0px"
  }, transition, !ownerState.disableDivider && {
    [`& .${accordionClasses_default.root}:not([data-last-child])`]: {
      "--Accordion-borderBottom": `1px solid ${theme.vars.palette.divider}`
    }
  });
});
var AccordionGroup = React.forwardRef(function AccordionGroup2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyAccordionGroup"
  });
  const {
    component = "div",
    color = "neutral",
    children,
    disableDivider = false,
    variant = "plain",
    transition = "0.2s ease",
    size = "md",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const ownerState = _extends({}, props, {
    component,
    color,
    disableDivider,
    variant,
    transition,
    size
  });
  const classes = useUtilityClasses(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: AccordionGroupRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime.jsx)(SlotRoot, _extends({}, rootProps, {
    children: (0, import_jsx_runtime.jsx)(ListProvider_default, {
      children
    })
  }));
});
true ? AccordionGroup.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used to render icon or text elements inside the AccordionGroup if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types.default.elementType,
  /**
   * If `true`, the divider between accordions will be hidden.
   * @default false
   */
  disableDivider: import_prop_types.default.bool,
  /**
   * The size of the component (affect other nested list* components).
   * @default 'md'
   */
  size: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["sm", "md", "lg"]), import_prop_types.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types.default.shape({
    root: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types.default.shape({
    root: import_prop_types.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  /**
   * The CSS transition for the Accordion details.
   * @default '0.2s ease'
   */
  transition: import_prop_types.default.oneOfType([import_prop_types.default.shape({
    expanded: import_prop_types.default.string.isRequired,
    initial: import_prop_types.default.string.isRequired
  }), import_prop_types.default.string]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types.default.string])
} : void 0;
var AccordionGroup_default = AccordionGroup;

export {
  getAccordionGroupUtilityClass,
  accordionGroupClasses_default,
  AccordionGroup_default
};
//# sourceMappingURL=chunk-EOK5UAVG.js.map
